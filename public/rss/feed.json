{
    "version": "https://jsonfeed.org/version/1",
    "title": "Humont.Dev",
    "home_page_url": "https://humont.dev",
    "feed_url": "https://humont.dev/rss/feed.json",
    "description": "Humont's blog about tech and health",
    "icon": "https://humont.dev/favicon.ico",
    "author": {
        "name": "humont",
        "url": "https://humont.dev"
    },
    "items": [
        {
            "id": "https://humont.dev/posts/2021-12-14-NFT-game-asset-ownership",
            "content_html": "<h1>NFT Game Asset Ownership</h1>\n<p>One of the promises that NFT's seek to fulfils in the context of gaming - is ownership over in game content. I was thinking about this today as League Of Legends released some new skins, and I can't help but wonder what the implications of that are.</p>\n<p>Say i purchase a LoL in game skin as an NFT, and Riot bans me from playing LoL: i can do.... what? Are there other games that promise interoperability for that skin? Unlikely. Can i sell that skin on a secondary market and at least make some value back? Probably.</p>\n<p>These thoughts are still not fully formed, but here they are anyway:</p>\n<p><strong>What NFT's are UNLIKELY to unlock</strong></p>\n<ol>\n<li>\n<p>Game interoperability.</p>\n<ul>\n<li>The incentive for developers to actually implement interoperability seems low, at least at the start. There's a potential future where some developers hack user adoption by making their game compatible with existing game's NFTs, but i imagine that this would seriously limit the creativity that developers could express in their games.</li>\n</ul>\n</li>\n<li>\n<p>Being able to play a game if a developer decides to boot you from the platform.</p>\n</li>\n</ol>\n<p><strong>What NFT's are LIKELY to unlock</strong></p>\n<ol>\n<li>A new genre of games (e.g Axie Infinity and other NFT based games with their own tokenomics), with different funding models for the developers.</li>\n<li>Secondary markets for traditional game content (e.g sell your skin from LoL).</li>\n<li>Meta-communities around games\n<ul>\n<li>e.g: gamers with NFTs chatting on their communication medium of choice, or coming together and creating derivative content/games based on their in-game assets</li>\n<li>This might even negate the first bullet point in the <strong>UNLIKELY</strong> section - as this creates defacto interoperability through composability.</li>\n</ul>\n</li>\n</ol>\n",
            "url": "https://humont.dev/posts/2021-12-14-NFT-game-asset-ownership",
            "title": "NFT Game asset ownership",
            "summary": "NFT Game asset ownership",
            "date_modified": "2021-12-14T00:00:00.000Z",
            "author": {
                "name": "humont",
                "url": "https://humont.dev"
            }
        },
        {
            "id": "https://humont.dev/posts/2021-11-09-three-circuits-2",
            "content_html": "<h1>Three Circuits 2</h1>\n<p>So this is a slight evolution of the <a href=\"/posts/2021-11-08-three-circuits\">last set up</a> - with a little more volume checked in, and a clearly separation of focus on each session.</p>\n<p>The basic set up is:</p>\n<ol>\n<li>Strength day: Double progression method</li>\n<li>Bodybuilding Day: Tripple rest pause method (DC Style)</li>\n<li>Uni-lateral (balance) Day: Quality work</li>\n</ol>\n<h2>Day 1</h2>\n<ol>\n<li>Overhead Press: 3-5@80kg</li>\n<li>Pendlay Row: 3-5@100kg</li>\n<li>Front Squat: 3-5@110kg</li>\n<li>Standing Ab wheel roll out: 3-5 @medium band\nx3 rounds (45s between each exercise)</li>\n</ol>\n<h2>Day 2</h2>\n<ol>\n<li>Lateral raises</li>\n<li>DB Fly</li>\n<li>Parallette push up</li>\n<li>Neutral grip pull up</li>\n<li>Band Pull apart</li>\n<li>DB Curl</li>\n<li>Sissy Squat\nx1 rounds - continuous circuit</li>\n</ol>\n<h2>Day 3</h2>\n<ol>\n<li>Single arm KB Swing</li>\n<li>Rear foot elevated split squat</li>\n<li>Turkish Getup</li>\n</ol>\n",
            "url": "https://humont.dev/posts/2021-11-09-three-circuits-2",
            "title": "Three Circuits 2",
            "summary": "Three Circuits 2",
            "date_modified": "2021-12-13T00:00:00.000Z",
            "author": {
                "name": "humont",
                "url": "https://humont.dev"
            }
        },
        {
            "id": "https://humont.dev/posts/2021-11-08-three-circuits",
            "content_html": "<h1>Three Circuits</h1>\n<p>I've actually been doing this routine for a few weeks now, but I forgot to write about it (something about blogging not being second nature... yet!).</p>\n<p>It's a simple structure: 1 day on, 1 day off, ad nauseam. I'm also chucking in some long and slow cardio on off days - a 5km run with a friend. Each circuit is ran through three times, and the goal is to incrementally increase the reps across all three, until I hit my self prescribed rep ceiling, at which point I increase the weight.</p>\n<p>These seem to be taking between 25-35 minutes depending on how energetic i'm feeling.</p>\n<p>Quite simple. Quite straight forwards.</p>\n<h2>Day 1</h2>\n<ol>\n<li>Overhead Press: 3-5@80kg</li>\n<li>Pendlay Row: 3-5@100kg</li>\n<li>Front Squat: 3-5@110kg</li>\n<li>V-Ups: 15+ @bw</li>\n</ol>\n<h2>Day 2</h2>\n<ol>\n<li>Weighted Parrallet push up: 8-10@+25kg</li>\n<li>Pull up: 10-12 @bw</li>\n<li>Stiff leg deadlift: 12-14@100kg</li>\n<li>Standing Ab Wheel roll out: 3-5@purple band</li>\n</ol>\n<h2>Day 3</h2>\n<ol>\n<li>DB Curls: 6-8@15kg</li>\n<li>DB Skull crushers: 6-8@15kg</li>\n<li>Glute bridge/clam shell duo: 15,14,13,12....3,2,1</li>\n<li>Hardstyle Plank: 10 breaths</li>\n</ol>\n",
            "url": "https://humont.dev/posts/2021-11-08-three-circuits",
            "title": "Three Circuits",
            "summary": "Three Circuits",
            "date_modified": "2021-11-08T00:00:00.000Z",
            "author": {
                "name": "humont",
                "url": "https://humont.dev"
            }
        },
        {
            "id": "https://humont.dev/posts/2021-10-28-gov-api",
            "content_html": "<h1>A useable API for Government</h1>\n<blockquote>\n<p>Currently accessible @ <a href=\"https://gov-api.humont.dev/api/graphql\">gov-api.humont.dev</a></p>\n</blockquote>\n<h2>Background</h2>\n<p>For years now I've come back again and again to the problem of an informed citizenry. The internet seems to have largely demolished the fourth estates role in keeping citizens informed as to what is <em>actually</em> happening, whilst also creating new avenues for <em>misinformation</em> to spread. Yet we were promised the opposite: that the internet, the \"information superhighway\" as it was once called, would make it <em>easier</em> for people to remain informed, and <em>harder</em> for those wishing to mislead to actually do so.</p>\n<p>Whilst there are probably a whole host of reasons as to why we have ended up where we are, and I'm sure there are some very intelligent people who have come up with frameworks to analyse and explain it, to me it would appear that one important factor is this:</p>\n<p><em>Despite having the means of instantaneous and comprehensive access to information, many institutions have yet to actually make that data accessible</em>.</p>\n<p>By accessible, I don't just mean available: I mean that the information can be discovered, and digested in a meaningful way by most citizens. Which brings me to the current idea - an accessible API (application programming interface) for government institutions and services, where developers or citizens with the technical know-how traverse the reams of data. It will make available data accessible. It will make it easy to build dashboards that presents this data. It will, hopefully, allow for at least a <em>small</em> portion of the citizenry to become better informed.</p>\n<h2>The Project</h2>\n<p>I am deploying a GraphQL endpoint over the existing U.K. parliament RESTful API. Right now, the endpoint covers only a portion of the <a href=\"https://members-api.parliament.uk/index.html\">Members API</a> found on the UK Parliament's <a href=\"https://members-api.parliament.uk/index.html\">developer hub</a>. Now that the basic architecture is in place, and that I've made some initial decisions as to the shape of the data, I'll use the next few weeks to finish coverage of the entire developer API for parliament.</p>\n<p>The hope is that over time, this endpoint will cover more and more government services, creating a single point of access for other developers (and myself) to play around with creating dashboards, tables, and any other imaginable view on top of this data.</p>\n<h2>Monetisation</h2>\n<p>This is trickier. Access <em>should</em> be free (this is, after all, publicly available data). However, time and effort are being spent to create this project, so remuneration is somewhat desirable. I think I'll rate limit access, and create a tier with no limits at a fixed price. This is obviously subject to change.</p>\n",
            "url": "https://humont.dev/posts/2021-10-28-gov-api",
            "title": "A Useable API for Government",
            "summary": "A Useable API for Government",
            "date_modified": "2021-10-28T00:00:00.000Z",
            "author": {
                "name": "humont",
                "url": "https://humont.dev"
            }
        },
        {
            "id": "https://humont.dev/posts/2021-10-15-crytpo-weighing-and-measuring",
            "content_html": "<h1>Why do I find blockchain so appealing: Measuring and Rewarding Value</h1>\n<h2>Preamble</h2>\n<p>I've been fascinated by the blockchain world since just before the 2017 bull run - and have been reading keenly about new projects, and existing project developments ever since.</p>\n<p>Now that I'm starting to actually develop on the blockchain, I think it's time I develop my thoughts a little as to why I find the space exciting. This will probably evolve into a series of posts, loosely tied together by conceit of asking myself a question coming to a thoughtful answer. I'll try and do away with my emotional bias of wanting to like the general idea of blockchains, and develop my ideas from there.</p>\n<h2>Measuring Value</h2>\n<blockquote>\n<p>Rather than seeing himself as human because he could make economic calculations, the hunter insisted that being truly human meant <em>refusing</em> to make such calculations, refusing to measure or remember who had given what to whom, for the precise reason that doing so would inevitably create a world where we began \"comparing power with power, measuring, calculating\" and reducing each other to slaves or dogs through debt.</p>\n<p><em>History of Debt, 10th anniversary edition, David Graeber, p.79</em></p>\n</blockquote>\n<p>Every time we assign a measurable value to something, we effectively degrade it - that's the crux of the quote above from Graeber's insightful work on debt. Services, objects, and <em>people</em> lose something when we decide \"this is how much it, or you, is worth\". There is something intuitively truthy about this - think of climate change: the second we assign a value to emissions, effectively telling companies/people pay for the damage you are causing, we also make a claim as to the worth of our planet and climate. Yet ask any person today, \"what is the future of this planet, it's ecosystem, worth?\" and the answer <em>should</em> be that it's invaluable.</p>\n<p>I find this appealing.</p>\n<p>Yet I also find blockchains and their capacity to algorithmically and democratically assign and distribute value appealing. Which poses a slight conundrum - part of the goal of blockchain is to capture as much behaviour as possible <em>on chain</em> in order for that behaviour to be valued, and that value distributed. So how do we reconcile this tension?</p>\n<p>One answer is that we live in a world where we do weigh and measure <em>some</em> things, and that we create harm by neglecting to weight and measure <em>other</em> things - a classic example being care work (a role traditionally fulfilled by women, a commonality to a lot of things we don't measure). In the world of development, open source contributions are one such example. Accordingly, a system that could facilitate the rewarding of such work can only serve to bring about a little more balance and fairness.</p>\n<p>This leads to my current point in the development of this trail of thought: Blockchains might represent a path towards no longer having to think about valuations and rewards. In a world where rewards are algorithmically distributed, automatically, without the onus being on the claimant, we may finally stop continuously measuring and weighing. Indeed, perhaps our propensity to do so lies in the fact that such matters are up for debate, and that no two people can quite agree on a single source of truth.</p>\n<p>Then again, this does start to sound like quite a utopian, extremist view point.</p>\n",
            "url": "https://humont.dev/posts/2021-10-15-crytpo-weighing-and-measuring",
            "title": "Why do I find blockchain so appealing: Measuring Value",
            "summary": "Why do I find blockchain so appealing: Measuring Value",
            "date_modified": "2021-10-15T00:00:00.000Z",
            "author": {
                "name": "humont",
                "url": "https://humont.dev"
            }
        },
        {
            "id": "https://humont.dev/posts/2021-09-15-4-day-full-body",
            "content_html": "<h1>4 Day Full Body</h1>\n<blockquote>\n<p>Review:\nEnded up running this for 3 cycles instead of more - tweaked something in my shoulder, which made all the overhead work near impossible for a while.</p>\n</blockquote>\n<blockquote>\n<p>Overall, it was a nice cycle and a nice change of pace - good to do some more volume in there for a bit, and I may bump it up again in november when i know i'll be in one place for a while!</p>\n</blockquote>\n<h2>Reasons</h2>\n<p>Over the last couple years, my focus has moved away from exercising quite a bit, and been spending most of my daily energy on programming and <em>other life stuff</em>. As a result of this, my programs have become quite low volume and low intensity - which I've compensated for by increasing the frequency. But every now and again, I want a <em>little</em> more <em>oomph</em>!</p>\n<p>This program should serve that purpose!</p>\n<h2>Design</h2>\n<p>Each day is fullbody-ish... pairing upper body push with lowerbody pull, and upper body pull with lower body push.</p>\n<p>Each workout has three sections:</p>\n<ol>\n<li>Strength piece / Primary exercise</li>\n<li>Accessory Exercise</li>\n<li>Volume work</li>\n</ol>\n<blockquote>\n<p>The strength piece uses a structure I've had in my repertoire for close to a decade now - 3 sets: one heavy; one medium; one light.\nHeavy: 3-5 (or 5-7 if legs) reps.\nMedium: 7-10 (or 9-12 if legs) reps.\nLight: 12-15 (or 15+ if legs) reps.</p>\n<p>Pick a weight that allows you to hit the bottom end of the heavy range for an exercise. For the other sets, the weight depends on that first one:</p>\n<p>less than 100kg = -10kg/set</p>\n<p>less than 200kg = -20kg/set</p>\n<p>more than 200kg = -40kg/set</p>\n<p>When you reach the top rep range on the light set, increase the weight by 5-10kg</p>\n</blockquote>\n<p>Progression for the accessory and volume work is pretty straight forward, add reps each workout if possible, add weight when I hit the top rep range (or when I feel it's appropriate).</p>\n<p>These should take about 25-35 mins to finish, including the warm up.</p>\n<p>I'll probably run this for 5 or so cycles.</p>\n<h2>Program:</h2>\n<p><strong>Day 1</strong></p>\n<ol>\n<li>Over head press: @80kg, @70kg, @60kg (180s)</li>\n<li>Wide grip behind the neck press: 3x10-12 (60s)</li>\n</ol>\n<p>superset (x2)(0s):</p>\n<ol start=\"3\">\n<li>Chest Fly: triple rest pause @15kg</li>\n<li>Nordic Back extensions: triple rest pause</li>\n</ol>\n<p><strong>Day 2</strong></p>\n<ol>\n<li>Front Squat: @110kg, @90kg, @70kg (180s)</li>\n<li>Rear foot elevated split squats: 3x10-12 (90s)</li>\n</ol>\n<p>superset (x2)(0s):</p>\n<ol start=\"3\">\n<li>Ring Row: Max reps</li>\n<li>Hammer curl: Max reps</li>\n<li>V-Ups</li>\n</ol>\n<p><strong>Day 3</strong></p>\n<ol>\n<li>Dips: @+40kg, @+20kg, @bw (180s)</li>\n<li>Weighted ring push ups: 3x10-12 (60s)</li>\n</ol>\n<p>superset (x2)(0s):</p>\n<ol start=\"3\">\n<li>Nordic Hamstring Curls: triple rest pause</li>\n<li>Lateral raises: triple rest pause</li>\n</ol>\n<p><strong>Day 4</strong></p>\n<ol>\n<li>Single Arm pull up: @-7.5kg, @-17.5kg, regular pullup @bw (180s)</li>\n<li>Barbbell Row: 3x10-12 (60s)</li>\n</ol>\n<p>superset (x2)(0s):</p>\n<ol start=\"3\">\n<li>Sissy Squat: xMax</li>\n<li>Hanging Leg Raise: xMax</li>\n<li>DB Curl: xMax</li>\n</ol>\n",
            "url": "https://humont.dev/posts/2021-09-15-4-day-full-body",
            "title": "4 Day Full Body",
            "summary": "4 Day Full Body",
            "date_modified": "2021-09-15T00:00:00.000Z",
            "author": {
                "name": "humont",
                "url": "https://humont.dev"
            }
        },
        {
            "id": "https://humont.dev/posts/2021-09-01-solana-programming-overview",
            "content_html": "<h1>Solana's Programming Model</h1>\n<p>Here's my sumarising of how the Solana blockchain works. Mainly so I can refer back to it and understand it in my own words! It mostly follows the breakdown provided in their own <a href=\"https://docs.solana.com/developing/programming-model/overview\">documentation</a>, but with more pretty drawings, and a little additional context drawn in from other readings.</p>\n<h2>Overview</h2>\n<p>Solana's system architecture (or at least, the part of it that is of interest in understanding how to develop for it) can be broken down into validators and clusters (these function as a sort of \"server\"). A cluster is simply a set of validators. There can be many clusters each using the Solana program, but unless they share a genesis block (the first block in the chain), they are considered different chains and do not interact. A transaction (more on this later) sent to the wrong cluster will be ignored.</p>\n<p><img src=\"/images/2021-09/cluster-validator.png\" alt=\"Solana Cluster Validator Diagram\"></p>\n<p>Clients send transactions to a validator, and those transactions end up in the cluster's <em>data plane</em> (created by the validator that is currently acting as leader) where they are batched and sent to validator nodes to validate into a block.</p>\n<h2>The Transaction</h2>\n<p>The transaction sent by the client can contain <em>instructions</em>. The Solana run time (itself a program), processes the instructions in the given order and atomically. An instruction contains three key parts: 1) the program id that should be executed; 2) the accounts that are affected by this program; 3) a data byte array - used to tell the program what functions to call and with what arguments - kind of like an RPC.</p>\n<p><img src=\"/images/2021-09/transaction-instructions.png\" alt=\"Solana Cluster Validator Diagram\"></p>\n<h2>The Account</h2>\n<p>Accounts store state. The Solana documentation compares accounts to files in an operating system - they can hold arbitrary data and maintain the state of it after a program has finished executing. Accounts also have metadata that indicates the access control for the account.</p>\n<p><strong>It's important to note that accounts pay rent in order to remain alive in a cluster</strong>. When validators scan an account, they collect rent, but if the accounts balance is 0 lamports, then the account is purged. The way around this is to deposit a sufficient amount of Lamports into the account to mark it <a href=\"https://docs.solana.com/developing/programming-model/accounts#rent-exemption\">rent-exempt</a></p>\n<p>Each account has an address that can be used to look it up.</p>\n<p>Of particular interest, is that an account can be marked as \"executable\" - making it a program (ooooh things are starting to make sense now). An interesting property of executable accounts is that their data is immutable - so they <em>cannot</em> store state!</p>\n<h3>Account ownership</h3>\n<p>This bit is important a \"regular\" account (one that can be accessed by a wallet) is created and owned by the built-in <code>System</code> program. These are refered to as a <code>system account</code>. The metadata of this account is used to denote the \"owner\" in the traditional sense of the word, but technically, the programmatic owner is the <code>System</code> program.</p>\n<blockquote>\n<p>this is a bit of a mind bender... so accounts don't <em>actually</em> belong to you, but to the blockchain? Can the <code>System</code> program do things to these accounts - clearly, yes - as it can <em>take</em> rent, without requiring a signature... better hope that code is written well!</p>\n</blockquote>\n<p>An executable account (a program) can also create accounts and own them (ok, so accounts are always owned by programs, i.e. executable accounts). A program might create an account during it's execution, which leads to an interesting possibility where (<a href=\"https://docs.solana.com/developing/programming-model/runtime#capability-of-programs\">quoting from documentation</a>) : <em>\"the entire set of accounts owned by a given program can be regarded as a key-value store where a key is the account address and value is program-specific arbitrary binary data. A program author can decide how to manage the program's whole state as possibly many accounts.\"</em></p>\n<h3>Program Capabilities</h3>\n<p>This section is best just copied and pasted <a href=\"https://docs.solana.com/developing/programming-model/runtime#policy\">from their docs</a> again - here are things that accounts can do:</p>\n<blockquote>\n<ul>\n<li>Only the owner of the account may change owner.\n<ul>\n<li>And only if the account is writable.</li>\n<li>And only if the account is not executable</li>\n<li>And only if the data is zero-initialized or empty.</li>\n</ul>\n</li>\n<li>An account not assigned to the program cannot have its balance decrease.</li>\n<li>The balance of read-only and executable accounts may not change.</li>\n<li>Only the system program can change the size of the data and only if the system program owns the account.</li>\n<li>Only the owner may change account data.\n<ul>\n<li>And if the account is writable.</li>\n<li>And if the account is not executable.</li>\n</ul>\n</li>\n<li>Executable is one-way (false->true) and only the account owner may set it.</li>\n<li>No one modification to the rent_epoch associated with this account.</li>\n</ul>\n</blockquote>\n<p>Additionaly, a program has a budget - to prevent it from abusing the blockchain's resources.</p>\n<h3>Cross Program Invocations</h3>\n<p>Intuitively, programs can call other programs (but watch your budget). Note that there is no concurrency in this model - if a program calls another, it pauses until the latter has finished running. The call depth for cross program invocations is 64.</p>\n<p>There are some fancy things that can be done here - specifcally, with the concept of <a href=\"https://docs.solana.com/developing/programming-model/calling-between-programs#program-derived-addresses\">Program Derived Addresses (PDA)</a>. A program may programmatically generate a signature for an as of yet non-existant account (remember - programs can own accounts), it can also transfer ownership of this account to another program (by modifying the ownership metadata of the account). Since programs cannot keep state, they cannot handle escrow functionality on their own - but by creating and transfering account ownerships, they can.</p>\n<p>A PDA can only be controlled by programs, not by modifiable addresses (or external users) - this makes escrow safe as an escrow account can only be controlled by the creator (or later transferred to) program.</p>\n",
            "url": "https://humont.dev/posts/2021-09-01-solana-programming-overview",
            "title": "Solana Programming Model Overview",
            "summary": "Solana Programming Model Overview",
            "date_modified": "2021-09-01T00:00:00.000Z",
            "author": {
                "name": "humont",
                "url": "https://humont.dev"
            }
        },
        {
            "id": "https://humont.dev/posts/2021-08-31-solana-local-dev",
            "content_html": "<h1>Local development for solana</h1>\n<p>Time to jump into some blockchain development, but my god... the fees. Good thing there are alternatives to deploying programmes and smart contracts straight to the main networks!</p>\n<p>What follows is my path to understanding how to develop and test solana programmes locally.</p>\n<h2>Dependencies</h2>\n<p>We'll need:</p>\n<ol>\n<li><a href=\"https://doc.rust-lang.org/stable/book/ch01-01-installation.html\">Rust</a></li>\n<li><a href=\"https://docs.solana.com/cli/install-solana-cli-tools\">Solana Tool Suite</a></li>\n</ol>\n<h2>Localnet</h2>\n<p>Create a local solana keypair (the basis for a wallet):</p>\n<pre><code class=\"language-shell\">solana-keygen new\n</code></pre>\n<p>Then un the following command to launch network:</p>\n<pre><code class=\"language-shell\">solana-test-validator\n</code></pre>\n<p>Double check that your local solana configuration is set to using this test net as the RPC endpoint, <code>solana config get</code> should show <code>http://localhost:8899</code> as the <code>RPC URL</code>. If it doesn't, run <code>solana config set --url http://locahost:8899</code>. Then check that all is working by calling the chain and checking your balance: <code>solana balance</code> which should output a number greater than zero.</p>\n<p>I happen to have some funky stuff happening on my computer meaning that <code>localhost</code> doesn't resolve to <code>127.0.0.1:8900</code>. So if you get an error messag</p>\n<p>If you happen to have been running the test-validator prevoiusly on a different network, then it may not have registered your keypair, in which case you need to re-initialise the network with <code>solana-test-validator -r</code></p>\n<h2>Deploying to local net with the command line</h2>\n<p>This part is easy:</p>\n<pre><code class=\"language-shell\">solana deploy {{PROGRAM_PATH}}\n</code></pre>\n<p>which should output a <code>programId</code> which you can now use in your own clients!</p>\n",
            "url": "https://humont.dev/posts/2021-08-31-solana-local-dev",
            "title": "Local development for solana",
            "summary": "Local development for solana",
            "date_modified": "2021-08-31T00:00:00.000Z",
            "author": {
                "name": "humont",
                "url": "https://humont.dev"
            }
        },
        {
            "id": "https://humont.dev/posts/2021-08-16-full-text-search",
            "content_html": "<h1>Full text search with Hasura</h1>\n<p><a href=\"https://hasura.io\">Hasura</a> is an open source GraphQL layer on top of PostgreSQL that makes it easy to manage your data, and automatically exposes it through a GraphQL endpoint.</p>\n<p>Having now tinkered with it on a few smaller personal projects, and two professional projects, I've started wanting to do things that don't neceessarily come naturally on Hasura. <em>Full text search</em> is one of those.</p>\n<hr>\n<h2>Scenario</h2>\n<p>Let's use a simple table as an example:</p>\n<pre><code class=\"language-sql\">CREATE TABLE \"articles\" (\n    \"id\" uuid NOT NULL DEFAULT gen_random_uuid(),\n    \"title\" text,\n    \"content\" text,\n    \"tags\" text\n)\n</code></pre>\n<p>Our goal is to run full text search over a document comprising <code>title</code> <code>content</code> <code>tags</code>.</p>\n<h2>The simple way</h2>\n<p>The easiest way to integrate a form of search, would be to use some basic PostgreSQL <a href=\"https://www.postgresql.org/docs/9.4/functions-matching.html\">pattern matching</a> - Which Hasura exposes in it's searches.</p>\n<pre><code class=\"language-graphql\">query Search($searchValue: String! = \"%some search string%\") {\n  articles(\n    where: {\n      _or: [\n        { title: { _ilike: $searchValue } }\n        { content: { _ilike: $searchValue } }\n        { tags: { _ilike: $searchValue } }\n      ]\n    }\n  ) {\n    id\n    title\n    content\n    tags\n  }\n}\n</code></pre>\n<p>Simple. No frills. But there are some cons:</p>\n<ol>\n<li>No fuzzy search</li>\n<li>No ranking of results.</li>\n<li>No way of weighting the results based on whether the match is in the title, content, or tags.</li>\n<li>No dictionary - if you search for \"amazingly\" it won't match \"amazing\" or \"amazed\".</li>\n<li>It's super verbose, clunky to write, and prone to human programmer error!</li>\n</ol>\n<p>So this is fine for very simple, and restrictive search scenarios. But we can do better.</p>\n<h2>Fuzzy Search via PostgreSQL Function</h2>\n<p>This example is taken directly from the <a href=\"https://hasura.io/docs/latest/graphql/core/databases/postgres/schema/custom-functions.html#example-fuzzy-match-search-functions\">Hasura documentation</a>:</p>\n<p>Open up the Hasura console, navigate to to <code>Data > SQL</code>, then do the following:</p>\n<pre><code class=\"language-sql\">CREATE EXTENSION pg_trgm;\n</code></pre>\n<p>We need this extension for creating the GIN index bellow</p>\n<pre><code class=\"language-sql\">CREATE INDEX articles_gin_idx ON articles\nUSING GIN ((title || ' ' || content || ' ' || tags) gin_trgm_ops);\n</code></pre>\n<p>As a non PostgreSQL expert, this felt like some hand wavey voodoo... <em>What on earth is a GIN index? What on earth is a <code>gin_trgm_ops</code>?</em></p>\n<p>Lets start with the <code>trgm</code> part:</p>\n<blockquote>\n<p>A trigram is a group of three consecutive characters taken from a string. We can measure the similarity of two strings by counting the number of trigrams they share. This simple idea turns out to be very effective for measuring the similarity of words in many natural languages.</p>\n<p><a href=\"https://www.postgresql.org/docs/current/pgtrgm.html\">PostgreSQL documentation - pg_trgm</a></p>\n</blockquote>\n<p>So this function would break the word <code>test</code> into <code>t</code> <code>te</code> <code>tes</code> <code>est</code> <code>st</code> <code>t</code></p>\n<blockquote>\n<p>GIN is designed for handling cases where the items to be indexed are composite values, and the queries to be handled by the index need to search for element values that appear within the composite items.</p>\n<p><a href=\"https://www.postgresql.org/docs/9.5/gin-intro.html\">PostgreSQL documentation - GIN intro</a></p>\n</blockquote>\n<p>So in this case, we're creating a <em>composite</em> item from <code>title</code>,<code>content</code> and<code>tags</code>, turning it into a <em>trigram</em> and, for performance reasons, we want our PostgreSQL database to index this for faster retrieval.</p>\n<p>Now create the actual function (make sure you check the box: \"track this function\")</p>\n<pre><code class=\"language-sql\">CREATE FUNCTION search_articles(search text)\nRETURNS SETOF articles AS $$\n    SELECT *\n    FROM articles\n    WHERE\n      search &#x3C;% (title || ' ' || content || ' ' || tags)\n    ORDER BY\n      similarity(search, (title || ' ' || content || ' ' || tags)) DESC\n    LIMIT 5;\n$$ LANGUAGE sql STABLE;\n</code></pre>\n<p>The key thing here is the <code>similarity(arg1, arg2)</code> function. It's a function from the <code>pg_trgm</code> module that splits both arguments into trigrams, and compares them. This means our search is quite forgiving on typos and spelling mistakes!</p>\n<p>Not bad, but we can do better.</p>\n<h2>Full Text Search using a Dictionary</h2>\n<p>The issue with fuzzy search, is that it doesn't perform well on derivative words. eg: \"adventure\" versus \"adventuring\" or \"adventured\". What if the person running the search doesn't actually know the exact words to look for? Fuzzy search is forgiving of typos, but not of inprecise search terms.</p>\n<p>Enter PostgreSQL Dictionaries.</p>\n<blockquote>\n<p>Dictionaries allow fine-grained control over how tokens are normalized. With appropriate dictionaries, you can:</p>\n<ul>\n<li>Define stop words that should not be indexed.</li>\n<li>Map synonyms to a single word using Ispell.</li>\n<li>Map phrases to a single word using a thesaurus.</li>\n<li>Map different variations of a word to a canonical form using an Ispell dictionary.</li>\n<li>Map different variations of a word to a canonical form using Snowball stemmer rules.</li>\n</ul>\n<p><a href=\"https://www.postgresql.org/docs/13/textsearch-intro.html\">PostgreSQL documentation - Text Search Introduction</a></p>\n</blockquote>\n<p>Nice. REALLY nice. Now let's make it happen.</p>\n<p>First, let's create a function that can take all the columns we're interested in, and turn them into a document, and save that document into a new column called <code>ts_vector</code>:</p>\n<pre><code class=\"language-sql\">CREATE OR REPLACE FUNCTION public.create_ts_vector()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\n      BEGIN\n          NEW.ts_vector =\n            setweight(to_tsvector('simple', coalesce(NEW.title, '')), 'A') ||\n            setweight(to_tsvector('simple', coalesce(NEW.content, '')), 'B') ||\n            setweight(to_tsvector(coalesce(NEW.tags '')), 'C')\n          RETURN NEW;\n      END;\n  $function$;\n</code></pre>\n<p>Quite a few things happening here.</p>\n<ol>\n<li>the <code>coalesce(arg1, arg2)</code> function. This is a precaution, it returns the first non-null argument. We need to guarantee a string, so we use this.</li>\n<li>the <code>to_tsvector(arg1)</code> function. According to the PostgreSQL docs:\n<blockquote>\n<p>A tsvector value is a sorted list of distinct lexemes, which are words that have been normalized to merge different variants of the same word... Sorting and duplicate-elimination are done automatically during input.</p>\n<p><a href=\"https://www.postgresql.org/docs/13/datatype-textsearch.html\">PostgreSQL documentation - Text Search Types</a></p>\n</blockquote>\n</li>\n<li>the <code>setweight(arg1, arg2)</code> function. Which ascribes a weight (denoted by capitalised letters: A, B, C etc in descending order of importance), to that specific vector. This is useful for ordering or prioritising parts of our document. In this case, we've decided that the <code>title</code> should be given the most weight when matched against search terms.</li>\n</ol>\n<p>Ok, next step: a <code>trigger</code> that runs anytime a row is inserted or updated, so that this document column can be created/updated:</p>\n<pre><code class=\"language-sql\">CREATE TRIGGER \"add_trigger\"\nBEFORE INSERT OR UPDATE ON \"public\".\"articles\"\nFOR EACH ROW EXECUTE FUNCTION create_ts_vector();\n</code></pre>\n<p>Pretty self explanatory.</p>\n<p>Final Step: create an actual search function and expose it to hasura.</p>\n<pre><code class=\"language-sql\">CREATE OR REPLACE FUNCTION public.search_articles(search text)\n RETURNS SETOF articles\n LANGUAGE sql\n STABLE\nAS $function$\n    SELECT *\n    FROM articles\n    WHERE\n      articles.ts_vector @@ plainto_tsquery(search)\n    ORDER BY ts_rank(articles.ts_vector, plainto_tsquery(search)) DESC\n$function$;\n</code></pre>\n<p>Make sure to track this function from the Hasura console.</p>\n<p>So, what's happening here?</p>\n<ol>\n<li>This function takes in a search term as text.</li>\n<li>It returns a set of articles.</li>\n<li>It takes the search term and uses it as an argument in the <code>plainto_tsquery()</code> function, which does basically the same thing as the <code>to_tsvector()</code> function, but for the search query.</li>\n<li>Compares and tries to match the vector to the query using the <a href=\"https://www.postgresql.org/docs/13/textsearch-intro.html#TEXTSEARCH-MATCHING\">\"@@\" operator</a>.</li>\n<li>Returns the articles ordered and ranked (remember how we set a weight to our search terms?) by <code>ts_rank()</code></li>\n</ol>\n<p>Now, we have a new hasura graphql query type which we can run using:</p>\n<pre><code class=\"language-graphql\">query search($searchTerm: String) {\n  search_articles($searchTerm) {\n    id\n    title\n    content\n    tags\n  }\n}\n</code></pre>\n",
            "url": "https://humont.dev/posts/2021-08-16-full-text-search",
            "title": "Full text search with Hasura",
            "summary": "Full text search with Hasura",
            "date_modified": "2021-08-16T00:00:00.000Z",
            "author": {
                "name": "humont",
                "url": "https://humont.dev"
            }
        },
        {
            "id": "https://humont.dev/posts/2021-08-01-hello-world",
            "content_html": "<h1>Hello World</h1>\n<p>Is this thing on?</p>\n",
            "url": "https://humont.dev/posts/2021-08-01-hello-world",
            "title": "Hello World",
            "summary": "Hello World",
            "date_modified": "2021-08-01T00:00:00.000Z",
            "author": {
                "name": "humont",
                "url": "https://humont.dev"
            }
        }
    ]
}